// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pos/pos_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	POSService_CreateCart_FullMethodName          = "/pos.POSService/CreateCart"
	POSService_GetCart_FullMethodName             = "/pos.POSService/GetCart"
	POSService_AddItemToCart_FullMethodName       = "/pos.POSService/AddItemToCart"
	POSService_RemoveItemFromCart_FullMethodName  = "/pos.POSService/RemoveItemFromCart"
	POSService_ApplyDiscount_FullMethodName       = "/pos.POSService/ApplyDiscount"
	POSService_CreateOrder_FullMethodName         = "/pos.POSService/CreateOrder"
	POSService_CreateOrderFromCart_FullMethodName = "/pos.POSService/CreateOrderFromCart"
	POSService_GetOrder_FullMethodName            = "/pos.POSService/GetOrder"
	POSService_ListOrders_FullMethodName          = "/pos.POSService/ListOrders"
	POSService_VoidOrder_FullMethodName           = "/pos.POSService/VoidOrder"
	POSService_ReturnOrder_FullMethodName         = "/pos.POSService/ReturnOrder"
	POSService_ProcessPayment_FullMethodName      = "/pos.POSService/ProcessPayment"
	POSService_GetProduct_FullMethodName          = "/pos.POSService/GetProduct"
	POSService_GetProductByCode_FullMethodName    = "/pos.POSService/GetProductByCode"
	POSService_ListProducts_FullMethodName        = "/pos.POSService/ListProducts"
	POSService_ListProductGroups_FullMethodName   = "/pos.POSService/ListProductGroups"
	POSService_ListDiscounts_FullMethodName       = "/pos.POSService/ListDiscounts"
	POSService_ValidateDiscount_FullMethodName    = "/pos.POSService/ValidateDiscount"
	POSService_ListPaymentTypes_FullMethodName    = "/pos.POSService/ListPaymentTypes"
)

// POSServiceClient is the client API for POSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type POSServiceClient interface {
	// Cart Management
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
	AddItemToCart(ctx context.Context, in *AddItemToCartRequest, opts ...grpc.CallOption) (*AddItemToCartResponse, error)
	RemoveItemFromCart(ctx context.Context, in *RemoveItemFromCartRequest, opts ...grpc.CallOption) (*RemoveItemFromCartResponse, error)
	ApplyDiscount(ctx context.Context, in *ApplyDiscountRequest, opts ...grpc.CallOption) (*ApplyDiscountResponse, error)
	// Order Management
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	CreateOrderFromCart(ctx context.Context, in *CreateOrderFromCartRequest, opts ...grpc.CallOption) (*CreateOrderFromCartResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	VoidOrder(ctx context.Context, in *VoidOrderRequest, opts ...grpc.CallOption) (*VoidOrderResponse, error)
	ReturnOrder(ctx context.Context, in *ReturnOrderRequest, opts ...grpc.CallOption) (*ReturnOrderResponse, error)
	// Payment Processing
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	// Product Operations
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	GetProductByCode(ctx context.Context, in *GetProductByCodeRequest, opts ...grpc.CallOption) (*GetProductByCodeResponse, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	ListProductGroups(ctx context.Context, in *ListProductGroupsRequest, opts ...grpc.CallOption) (*ListProductGroupsResponse, error)
	// Discount Operations
	ListDiscounts(ctx context.Context, in *ListDiscountsRequest, opts ...grpc.CallOption) (*ListDiscountsResponse, error)
	ValidateDiscount(ctx context.Context, in *ValidateDiscountRequest, opts ...grpc.CallOption) (*ValidateDiscountResponse, error)
	// Payment Type Operations
	ListPaymentTypes(ctx context.Context, in *ListPaymentTypesRequest, opts ...grpc.CallOption) (*ListPaymentTypesResponse, error)
}

type pOSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPOSServiceClient(cc grpc.ClientConnInterface) POSServiceClient {
	return &pOSServiceClient{cc}
}

func (c *pOSServiceClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCartResponse)
	err := c.cc.Invoke(ctx, POSService_CreateCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, POSService_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) AddItemToCart(ctx context.Context, in *AddItemToCartRequest, opts ...grpc.CallOption) (*AddItemToCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemToCartResponse)
	err := c.cc.Invoke(ctx, POSService_AddItemToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) RemoveItemFromCart(ctx context.Context, in *RemoveItemFromCartRequest, opts ...grpc.CallOption) (*RemoveItemFromCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveItemFromCartResponse)
	err := c.cc.Invoke(ctx, POSService_RemoveItemFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ApplyDiscount(ctx context.Context, in *ApplyDiscountRequest, opts ...grpc.CallOption) (*ApplyDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyDiscountResponse)
	err := c.cc.Invoke(ctx, POSService_ApplyDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, POSService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) CreateOrderFromCart(ctx context.Context, in *CreateOrderFromCartRequest, opts ...grpc.CallOption) (*CreateOrderFromCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderFromCartResponse)
	err := c.cc.Invoke(ctx, POSService_CreateOrderFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, POSService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, POSService_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) VoidOrder(ctx context.Context, in *VoidOrderRequest, opts ...grpc.CallOption) (*VoidOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoidOrderResponse)
	err := c.cc.Invoke(ctx, POSService_VoidOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ReturnOrder(ctx context.Context, in *ReturnOrderRequest, opts ...grpc.CallOption) (*ReturnOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnOrderResponse)
	err := c.cc.Invoke(ctx, POSService_ReturnOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, POSService_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, POSService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) GetProductByCode(ctx context.Context, in *GetProductByCodeRequest, opts ...grpc.CallOption) (*GetProductByCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductByCodeResponse)
	err := c.cc.Invoke(ctx, POSService_GetProductByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, POSService_ListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ListProductGroups(ctx context.Context, in *ListProductGroupsRequest, opts ...grpc.CallOption) (*ListProductGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductGroupsResponse)
	err := c.cc.Invoke(ctx, POSService_ListProductGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ListDiscounts(ctx context.Context, in *ListDiscountsRequest, opts ...grpc.CallOption) (*ListDiscountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDiscountsResponse)
	err := c.cc.Invoke(ctx, POSService_ListDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ValidateDiscount(ctx context.Context, in *ValidateDiscountRequest, opts ...grpc.CallOption) (*ValidateDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateDiscountResponse)
	err := c.cc.Invoke(ctx, POSService_ValidateDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSServiceClient) ListPaymentTypes(ctx context.Context, in *ListPaymentTypesRequest, opts ...grpc.CallOption) (*ListPaymentTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentTypesResponse)
	err := c.cc.Invoke(ctx, POSService_ListPaymentTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// POSServiceServer is the server API for POSService service.
// All implementations must embed UnimplementedPOSServiceServer
// for forward compatibility.
type POSServiceServer interface {
	// Cart Management
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error)
	AddItemToCart(context.Context, *AddItemToCartRequest) (*AddItemToCartResponse, error)
	RemoveItemFromCart(context.Context, *RemoveItemFromCartRequest) (*RemoveItemFromCartResponse, error)
	ApplyDiscount(context.Context, *ApplyDiscountRequest) (*ApplyDiscountResponse, error)
	// Order Management
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	CreateOrderFromCart(context.Context, *CreateOrderFromCartRequest) (*CreateOrderFromCartResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	VoidOrder(context.Context, *VoidOrderRequest) (*VoidOrderResponse, error)
	ReturnOrder(context.Context, *ReturnOrderRequest) (*ReturnOrderResponse, error)
	// Payment Processing
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	// Product Operations
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	GetProductByCode(context.Context, *GetProductByCodeRequest) (*GetProductByCodeResponse, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	ListProductGroups(context.Context, *ListProductGroupsRequest) (*ListProductGroupsResponse, error)
	// Discount Operations
	ListDiscounts(context.Context, *ListDiscountsRequest) (*ListDiscountsResponse, error)
	ValidateDiscount(context.Context, *ValidateDiscountRequest) (*ValidateDiscountResponse, error)
	// Payment Type Operations
	ListPaymentTypes(context.Context, *ListPaymentTypesRequest) (*ListPaymentTypesResponse, error)
	mustEmbedUnimplementedPOSServiceServer()
}

// UnimplementedPOSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPOSServiceServer struct{}

func (UnimplementedPOSServiceServer) CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedPOSServiceServer) GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedPOSServiceServer) AddItemToCart(context.Context, *AddItemToCartRequest) (*AddItemToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemToCart not implemented")
}
func (UnimplementedPOSServiceServer) RemoveItemFromCart(context.Context, *RemoveItemFromCartRequest) (*RemoveItemFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItemFromCart not implemented")
}
func (UnimplementedPOSServiceServer) ApplyDiscount(context.Context, *ApplyDiscountRequest) (*ApplyDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDiscount not implemented")
}
func (UnimplementedPOSServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedPOSServiceServer) CreateOrderFromCart(context.Context, *CreateOrderFromCartRequest) (*CreateOrderFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderFromCart not implemented")
}
func (UnimplementedPOSServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedPOSServiceServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedPOSServiceServer) VoidOrder(context.Context, *VoidOrderRequest) (*VoidOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoidOrder not implemented")
}
func (UnimplementedPOSServiceServer) ReturnOrder(context.Context, *ReturnOrderRequest) (*ReturnOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrder not implemented")
}
func (UnimplementedPOSServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedPOSServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedPOSServiceServer) GetProductByCode(context.Context, *GetProductByCodeRequest) (*GetProductByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByCode not implemented")
}
func (UnimplementedPOSServiceServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedPOSServiceServer) ListProductGroups(context.Context, *ListProductGroupsRequest) (*ListProductGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductGroups not implemented")
}
func (UnimplementedPOSServiceServer) ListDiscounts(context.Context, *ListDiscountsRequest) (*ListDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiscounts not implemented")
}
func (UnimplementedPOSServiceServer) ValidateDiscount(context.Context, *ValidateDiscountRequest) (*ValidateDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDiscount not implemented")
}
func (UnimplementedPOSServiceServer) ListPaymentTypes(context.Context, *ListPaymentTypesRequest) (*ListPaymentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentTypes not implemented")
}
func (UnimplementedPOSServiceServer) mustEmbedUnimplementedPOSServiceServer() {}
func (UnimplementedPOSServiceServer) testEmbeddedByValue()                    {}

// UnsafePOSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to POSServiceServer will
// result in compilation errors.
type UnsafePOSServiceServer interface {
	mustEmbedUnimplementedPOSServiceServer()
}

func RegisterPOSServiceServer(s grpc.ServiceRegistrar, srv POSServiceServer) {
	// If the following call pancis, it indicates UnimplementedPOSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&POSService_ServiceDesc, srv)
}

func _POSService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_CreateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_AddItemToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).AddItemToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_AddItemToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).AddItemToCart(ctx, req.(*AddItemToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_RemoveItemFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).RemoveItemFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_RemoveItemFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).RemoveItemFromCart(ctx, req.(*RemoveItemFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ApplyDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ApplyDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ApplyDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ApplyDiscount(ctx, req.(*ApplyDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_CreateOrderFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).CreateOrderFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_CreateOrderFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).CreateOrderFromCart(ctx, req.(*CreateOrderFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_VoidOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).VoidOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_VoidOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).VoidOrder(ctx, req.(*VoidOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ReturnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ReturnOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ReturnOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ReturnOrder(ctx, req.(*ReturnOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_GetProductByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).GetProductByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_GetProductByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).GetProductByCode(ctx, req.(*GetProductByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ListProductGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ListProductGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ListProductGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ListProductGroups(ctx, req.(*ListProductGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ListDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ListDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ListDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ListDiscounts(ctx, req.(*ListDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ValidateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ValidateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ValidateDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ValidateDiscount(ctx, req.(*ValidateDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POSService_ListPaymentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServiceServer).ListPaymentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSService_ListPaymentTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServiceServer).ListPaymentTypes(ctx, req.(*ListPaymentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// POSService_ServiceDesc is the grpc.ServiceDesc for POSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var POSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.POSService",
	HandlerType: (*POSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _POSService_CreateCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _POSService_GetCart_Handler,
		},
		{
			MethodName: "AddItemToCart",
			Handler:    _POSService_AddItemToCart_Handler,
		},
		{
			MethodName: "RemoveItemFromCart",
			Handler:    _POSService_RemoveItemFromCart_Handler,
		},
		{
			MethodName: "ApplyDiscount",
			Handler:    _POSService_ApplyDiscount_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _POSService_CreateOrder_Handler,
		},
		{
			MethodName: "CreateOrderFromCart",
			Handler:    _POSService_CreateOrderFromCart_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _POSService_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _POSService_ListOrders_Handler,
		},
		{
			MethodName: "VoidOrder",
			Handler:    _POSService_VoidOrder_Handler,
		},
		{
			MethodName: "ReturnOrder",
			Handler:    _POSService_ReturnOrder_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _POSService_ProcessPayment_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _POSService_GetProduct_Handler,
		},
		{
			MethodName: "GetProductByCode",
			Handler:    _POSService_GetProductByCode_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _POSService_ListProducts_Handler,
		},
		{
			MethodName: "ListProductGroups",
			Handler:    _POSService_ListProductGroups_Handler,
		},
		{
			MethodName: "ListDiscounts",
			Handler:    _POSService_ListDiscounts_Handler,
		},
		{
			MethodName: "ValidateDiscount",
			Handler:    _POSService_ValidateDiscount_Handler,
		},
		{
			MethodName: "ListPaymentTypes",
			Handler:    _POSService_ListPaymentTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pos/pos_service.proto",
}
