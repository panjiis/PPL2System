// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v6.32.1
// source: analytics/analytics_service.proto

package protogen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PaginationRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalCount    int32  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *PaginationResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *DateRange) Reset() {
	*x = DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRange) ProtoMessage() {}

func (x *DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRange.ProtoReflect.Descriptor instead.
func (*DateRange) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{2}
}

func (x *DateRange) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *DateRange) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type SalesSummaryDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date              string                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	CashierId         int64                  `protobuf:"varint,3,opt,name=cashier_id,json=cashierId,proto3" json:"cashier_id,omitempty"`
	TotalTransactions int32                  `protobuf:"varint,4,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	TotalItemsSold    int32                  `protobuf:"varint,5,opt,name=total_items_sold,json=totalItemsSold,proto3" json:"total_items_sold,omitempty"`
	GrossSales        string                 `protobuf:"bytes,6,opt,name=gross_sales,json=grossSales,proto3" json:"gross_sales,omitempty"`
	TotalDiscounts    string                 `protobuf:"bytes,7,opt,name=total_discounts,json=totalDiscounts,proto3" json:"total_discounts,omitempty"`
	NetSales          string                 `protobuf:"bytes,8,opt,name=net_sales,json=netSales,proto3" json:"net_sales,omitempty"`
	TotalTax          string                 `protobuf:"bytes,9,opt,name=total_tax,json=totalTax,proto3" json:"total_tax,omitempty"`
	TotalCost         string                 `protobuf:"bytes,10,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	GrossProfit       string                 `protobuf:"bytes,11,opt,name=gross_profit,json=grossProfit,proto3" json:"gross_profit,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SalesSummaryDaily) Reset() {
	*x = SalesSummaryDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesSummaryDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesSummaryDaily) ProtoMessage() {}

func (x *SalesSummaryDaily) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesSummaryDaily.ProtoReflect.Descriptor instead.
func (*SalesSummaryDaily) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{3}
}

func (x *SalesSummaryDaily) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SalesSummaryDaily) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *SalesSummaryDaily) GetCashierId() int64 {
	if x != nil {
		return x.CashierId
	}
	return 0
}

func (x *SalesSummaryDaily) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *SalesSummaryDaily) GetTotalItemsSold() int32 {
	if x != nil {
		return x.TotalItemsSold
	}
	return 0
}

func (x *SalesSummaryDaily) GetGrossSales() string {
	if x != nil {
		return x.GrossSales
	}
	return ""
}

func (x *SalesSummaryDaily) GetTotalDiscounts() string {
	if x != nil {
		return x.TotalDiscounts
	}
	return ""
}

func (x *SalesSummaryDaily) GetNetSales() string {
	if x != nil {
		return x.NetSales
	}
	return ""
}

func (x *SalesSummaryDaily) GetTotalTax() string {
	if x != nil {
		return x.TotalTax
	}
	return ""
}

func (x *SalesSummaryDaily) GetTotalCost() string {
	if x != nil {
		return x.TotalCost
	}
	return ""
}

func (x *SalesSummaryDaily) GetGrossProfit() string {
	if x != nil {
		return x.GrossProfit
	}
	return ""
}

func (x *SalesSummaryDaily) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SalesSummaryDaily) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ProductSalesSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date           string                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	ProductId      int32                  `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductGroupId *int32                 `protobuf:"varint,4,opt,name=product_group_id,json=productGroupId,proto3,oneof" json:"product_group_id,omitempty"`
	QuantitySold   int32                  `protobuf:"varint,5,opt,name=quantity_sold,json=quantitySold,proto3" json:"quantity_sold,omitempty"`
	GrossSales     string                 `protobuf:"bytes,6,opt,name=gross_sales,json=grossSales,proto3" json:"gross_sales,omitempty"`
	TotalDiscounts string                 `protobuf:"bytes,7,opt,name=total_discounts,json=totalDiscounts,proto3" json:"total_discounts,omitempty"`
	NetSales       string                 `protobuf:"bytes,8,opt,name=net_sales,json=netSales,proto3" json:"net_sales,omitempty"`
	TotalCost      string                 `protobuf:"bytes,9,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	GrossProfit    string                 `protobuf:"bytes,10,opt,name=gross_profit,json=grossProfit,proto3" json:"gross_profit,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ProductSalesSummary) Reset() {
	*x = ProductSalesSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSalesSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSalesSummary) ProtoMessage() {}

func (x *ProductSalesSummary) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSalesSummary.ProtoReflect.Descriptor instead.
func (*ProductSalesSummary) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{4}
}

func (x *ProductSalesSummary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductSalesSummary) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ProductSalesSummary) GetProductId() int32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductSalesSummary) GetProductGroupId() int32 {
	if x != nil && x.ProductGroupId != nil {
		return *x.ProductGroupId
	}
	return 0
}

func (x *ProductSalesSummary) GetQuantitySold() int32 {
	if x != nil {
		return x.QuantitySold
	}
	return 0
}

func (x *ProductSalesSummary) GetGrossSales() string {
	if x != nil {
		return x.GrossSales
	}
	return ""
}

func (x *ProductSalesSummary) GetTotalDiscounts() string {
	if x != nil {
		return x.TotalDiscounts
	}
	return ""
}

func (x *ProductSalesSummary) GetNetSales() string {
	if x != nil {
		return x.NetSales
	}
	return ""
}

func (x *ProductSalesSummary) GetTotalCost() string {
	if x != nil {
		return x.TotalCost
	}
	return ""
}

func (x *ProductSalesSummary) GetGrossProfit() string {
	if x != nil {
		return x.GrossProfit
	}
	return ""
}

func (x *ProductSalesSummary) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProductSalesSummary) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EmployeePerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date              string                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	EmployeeId        int64                  `protobuf:"varint,3,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	TotalSales        string                 `protobuf:"bytes,4,opt,name=total_sales,json=totalSales,proto3" json:"total_sales,omitempty"`
	TotalTransactions int32                  `protobuf:"varint,5,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	TotalItemsSold    int32                  `protobuf:"varint,6,opt,name=total_items_sold,json=totalItemsSold,proto3" json:"total_items_sold,omitempty"`
	CommissionEarned  string                 `protobuf:"bytes,7,opt,name=commission_earned,json=commissionEarned,proto3" json:"commission_earned,omitempty"`
	PerformanceScore  string                 `protobuf:"bytes,8,opt,name=performance_score,json=performanceScore,proto3" json:"performance_score,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *EmployeePerformance) Reset() {
	*x = EmployeePerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeePerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeePerformance) ProtoMessage() {}

func (x *EmployeePerformance) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeePerformance.ProtoReflect.Descriptor instead.
func (*EmployeePerformance) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{5}
}

func (x *EmployeePerformance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeePerformance) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *EmployeePerformance) GetEmployeeId() int64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *EmployeePerformance) GetTotalSales() string {
	if x != nil {
		return x.TotalSales
	}
	return ""
}

func (x *EmployeePerformance) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *EmployeePerformance) GetTotalItemsSold() int32 {
	if x != nil {
		return x.TotalItemsSold
	}
	return 0
}

func (x *EmployeePerformance) GetCommissionEarned() string {
	if x != nil {
		return x.CommissionEarned
	}
	return ""
}

func (x *EmployeePerformance) GetPerformanceScore() string {
	if x != nil {
		return x.PerformanceScore
	}
	return ""
}

func (x *EmployeePerformance) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EmployeePerformance) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CustomerAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date                    string                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	ProductGroupId          *int32                 `protobuf:"varint,3,opt,name=product_group_id,json=productGroupId,proto3,oneof" json:"product_group_id,omitempty"`
	TotalTransactions       int32                  `protobuf:"varint,4,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	TotalRevenue            string                 `protobuf:"bytes,5,opt,name=total_revenue,json=totalRevenue,proto3" json:"total_revenue,omitempty"`
	AverageTransactionValue string                 `protobuf:"bytes,6,opt,name=average_transaction_value,json=averageTransactionValue,proto3" json:"average_transaction_value,omitempty"`
	PeakHour                *string                `protobuf:"bytes,7,opt,name=peak_hour,json=peakHour,proto3,oneof" json:"peak_hour,omitempty"`
	CreatedAt               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CustomerAnalytics) Reset() {
	*x = CustomerAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerAnalytics) ProtoMessage() {}

func (x *CustomerAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerAnalytics.ProtoReflect.Descriptor instead.
func (*CustomerAnalytics) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{6}
}

func (x *CustomerAnalytics) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerAnalytics) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CustomerAnalytics) GetProductGroupId() int32 {
	if x != nil && x.ProductGroupId != nil {
		return *x.ProductGroupId
	}
	return 0
}

func (x *CustomerAnalytics) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *CustomerAnalytics) GetTotalRevenue() string {
	if x != nil {
		return x.TotalRevenue
	}
	return ""
}

func (x *CustomerAnalytics) GetAverageTransactionValue() string {
	if x != nil {
		return x.AverageTransactionValue
	}
	return ""
}

func (x *CustomerAnalytics) GetPeakHour() string {
	if x != nil && x.PeakHour != nil {
		return *x.PeakHour
	}
	return ""
}

func (x *CustomerAnalytics) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomerAnalytics) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Aggregated reporting models
type SalesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period                  *DateRange             `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
	TotalRevenue            string                 `protobuf:"bytes,2,opt,name=total_revenue,json=totalRevenue,proto3" json:"total_revenue,omitempty"`
	TotalCost               string                 `protobuf:"bytes,3,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	GrossProfit             string                 `protobuf:"bytes,4,opt,name=gross_profit,json=grossProfit,proto3" json:"gross_profit,omitempty"`
	ProfitMarginPercentage  string                 `protobuf:"bytes,5,opt,name=profit_margin_percentage,json=profitMarginPercentage,proto3" json:"profit_margin_percentage,omitempty"`
	TotalTransactions       int32                  `protobuf:"varint,6,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	TotalItemsSold          int32                  `protobuf:"varint,7,opt,name=total_items_sold,json=totalItemsSold,proto3" json:"total_items_sold,omitempty"`
	AverageTransactionValue string                 `protobuf:"bytes,8,opt,name=average_transaction_value,json=averageTransactionValue,proto3" json:"average_transaction_value,omitempty"`
	DailyBreakdowns         []*SalesSummaryDaily   `protobuf:"bytes,9,rep,name=daily_breakdowns,json=dailyBreakdowns,proto3" json:"daily_breakdowns,omitempty"`
	TopProducts             []*ProductSalesSummary `protobuf:"bytes,10,rep,name=top_products,json=topProducts,proto3" json:"top_products,omitempty"`
}

func (x *SalesReport) Reset() {
	*x = SalesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesReport) ProtoMessage() {}

func (x *SalesReport) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesReport.ProtoReflect.Descriptor instead.
func (*SalesReport) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{7}
}

func (x *SalesReport) GetPeriod() *DateRange {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *SalesReport) GetTotalRevenue() string {
	if x != nil {
		return x.TotalRevenue
	}
	return ""
}

func (x *SalesReport) GetTotalCost() string {
	if x != nil {
		return x.TotalCost
	}
	return ""
}

func (x *SalesReport) GetGrossProfit() string {
	if x != nil {
		return x.GrossProfit
	}
	return ""
}

func (x *SalesReport) GetProfitMarginPercentage() string {
	if x != nil {
		return x.ProfitMarginPercentage
	}
	return ""
}

func (x *SalesReport) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *SalesReport) GetTotalItemsSold() int32 {
	if x != nil {
		return x.TotalItemsSold
	}
	return 0
}

func (x *SalesReport) GetAverageTransactionValue() string {
	if x != nil {
		return x.AverageTransactionValue
	}
	return ""
}

func (x *SalesReport) GetDailyBreakdowns() []*SalesSummaryDaily {
	if x != nil {
		return x.DailyBreakdowns
	}
	return nil
}

func (x *SalesReport) GetTopProducts() []*ProductSalesSummary {
	if x != nil {
		return x.TopProducts
	}
	return nil
}

type PerformanceReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period                 *DateRange             `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
	EmployeePerformances   []*EmployeePerformance `protobuf:"bytes,2,rep,name=employee_performances,json=employeePerformances,proto3" json:"employee_performances,omitempty"`
	TotalCommissions       string                 `protobuf:"bytes,3,opt,name=total_commissions,json=totalCommissions,proto3" json:"total_commissions,omitempty"`
	TopPerformerEmployeeId int64                  `protobuf:"varint,4,opt,name=top_performer_employee_id,json=topPerformerEmployeeId,proto3" json:"top_performer_employee_id,omitempty"`
	TopPerformerSales      string                 `protobuf:"bytes,5,opt,name=top_performer_sales,json=topPerformerSales,proto3" json:"top_performer_sales,omitempty"`
}

func (x *PerformanceReport) Reset() {
	*x = PerformanceReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceReport) ProtoMessage() {}

func (x *PerformanceReport) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceReport.ProtoReflect.Descriptor instead.
func (*PerformanceReport) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{8}
}

func (x *PerformanceReport) GetPeriod() *DateRange {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *PerformanceReport) GetEmployeePerformances() []*EmployeePerformance {
	if x != nil {
		return x.EmployeePerformances
	}
	return nil
}

func (x *PerformanceReport) GetTotalCommissions() string {
	if x != nil {
		return x.TotalCommissions
	}
	return ""
}

func (x *PerformanceReport) GetTopPerformerEmployeeId() int64 {
	if x != nil {
		return x.TopPerformerEmployeeId
	}
	return 0
}

func (x *PerformanceReport) GetTopPerformerSales() string {
	if x != nil {
		return x.TopPerformerSales
	}
	return ""
}

// Sales Reporting
type GetSalesReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateRange               *DateRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	CashierId               *int64     `protobuf:"varint,2,opt,name=cashier_id,json=cashierId,proto3,oneof" json:"cashier_id,omitempty"`
	ProductGroupId          *int32     `protobuf:"varint,3,opt,name=product_group_id,json=productGroupId,proto3,oneof" json:"product_group_id,omitempty"`
	IncludeDailyBreakdown   *bool      `protobuf:"varint,4,opt,name=include_daily_breakdown,json=includeDailyBreakdown,proto3,oneof" json:"include_daily_breakdown,omitempty"`
	IncludeProductBreakdown *bool      `protobuf:"varint,5,opt,name=include_product_breakdown,json=includeProductBreakdown,proto3,oneof" json:"include_product_breakdown,omitempty"`
}

func (x *GetSalesReportRequest) Reset() {
	*x = GetSalesReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesReportRequest) ProtoMessage() {}

func (x *GetSalesReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesReportRequest.ProtoReflect.Descriptor instead.
func (*GetSalesReportRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetSalesReportRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetSalesReportRequest) GetCashierId() int64 {
	if x != nil && x.CashierId != nil {
		return *x.CashierId
	}
	return 0
}

func (x *GetSalesReportRequest) GetProductGroupId() int32 {
	if x != nil && x.ProductGroupId != nil {
		return *x.ProductGroupId
	}
	return 0
}

func (x *GetSalesReportRequest) GetIncludeDailyBreakdown() bool {
	if x != nil && x.IncludeDailyBreakdown != nil {
		return *x.IncludeDailyBreakdown
	}
	return false
}

func (x *GetSalesReportRequest) GetIncludeProductBreakdown() bool {
	if x != nil && x.IncludeProductBreakdown != nil {
		return *x.IncludeProductBreakdown
	}
	return false
}

type GetSalesReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesReport *SalesReport `protobuf:"bytes,1,opt,name=sales_report,json=salesReport,proto3" json:"sales_report,omitempty"`
}

func (x *GetSalesReportResponse) Reset() {
	*x = GetSalesReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesReportResponse) ProtoMessage() {}

func (x *GetSalesReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesReportResponse.ProtoReflect.Descriptor instead.
func (*GetSalesReportResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetSalesReportResponse) GetSalesReport() *SalesReport {
	if x != nil {
		return x.SalesReport
	}
	return nil
}

type GetDailySummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	CashierId *int64 `protobuf:"varint,2,opt,name=cashier_id,json=cashierId,proto3,oneof" json:"cashier_id,omitempty"`
}

func (x *GetDailySummaryRequest) Reset() {
	*x = GetDailySummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailySummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailySummaryRequest) ProtoMessage() {}

func (x *GetDailySummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailySummaryRequest.ProtoReflect.Descriptor instead.
func (*GetDailySummaryRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetDailySummaryRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetDailySummaryRequest) GetCashierId() int64 {
	if x != nil && x.CashierId != nil {
		return *x.CashierId
	}
	return 0
}

type GetDailySummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailySummaries []*SalesSummaryDaily `protobuf:"bytes,1,rep,name=daily_summaries,json=dailySummaries,proto3" json:"daily_summaries,omitempty"`
}

func (x *GetDailySummaryResponse) Reset() {
	*x = GetDailySummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailySummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailySummaryResponse) ProtoMessage() {}

func (x *GetDailySummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailySummaryResponse.ProtoReflect.Descriptor instead.
func (*GetDailySummaryResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetDailySummaryResponse) GetDailySummaries() []*SalesSummaryDaily {
	if x != nil {
		return x.DailySummaries
	}
	return nil
}

type GenerateDailySummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	CashierId *int64 `protobuf:"varint,2,opt,name=cashier_id,json=cashierId,proto3,oneof" json:"cashier_id,omitempty"`
}

func (x *GenerateDailySummaryRequest) Reset() {
	*x = GenerateDailySummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDailySummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDailySummaryRequest) ProtoMessage() {}

func (x *GenerateDailySummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDailySummaryRequest.ProtoReflect.Descriptor instead.
func (*GenerateDailySummaryRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateDailySummaryRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GenerateDailySummaryRequest) GetCashierId() int64 {
	if x != nil && x.CashierId != nil {
		return *x.CashierId
	}
	return 0
}

type GenerateDailySummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneratedSummaries []*SalesSummaryDaily `protobuf:"bytes,1,rep,name=generated_summaries,json=generatedSummaries,proto3" json:"generated_summaries,omitempty"`
	Success            bool                 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message            *string              `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *GenerateDailySummaryResponse) Reset() {
	*x = GenerateDailySummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDailySummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDailySummaryResponse) ProtoMessage() {}

func (x *GenerateDailySummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDailySummaryResponse.ProtoReflect.Descriptor instead.
func (*GenerateDailySummaryResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateDailySummaryResponse) GetGeneratedSummaries() []*SalesSummaryDaily {
	if x != nil {
		return x.GeneratedSummaries
	}
	return nil
}

func (x *GenerateDailySummaryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GenerateDailySummaryResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// Product Analytics
type GetProductSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateRange      *DateRange         `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	ProductId      *int32             `protobuf:"varint,2,opt,name=product_id,json=productId,proto3,oneof" json:"product_id,omitempty"`
	ProductGroupId *int32             `protobuf:"varint,3,opt,name=product_group_id,json=productGroupId,proto3,oneof" json:"product_group_id,omitempty"`
	Pagination     *PaginationRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetProductSalesRequest) Reset() {
	*x = GetProductSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductSalesRequest) ProtoMessage() {}

func (x *GetProductSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductSalesRequest.ProtoReflect.Descriptor instead.
func (*GetProductSalesRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetProductSalesRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetProductSalesRequest) GetProductId() int32 {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return 0
}

func (x *GetProductSalesRequest) GetProductGroupId() int32 {
	if x != nil && x.ProductGroupId != nil {
		return *x.ProductGroupId
	}
	return 0
}

func (x *GetProductSalesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetProductSalesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductSales []*ProductSalesSummary `protobuf:"bytes,1,rep,name=product_sales,json=productSales,proto3" json:"product_sales,omitempty"`
	Pagination   *PaginationResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetProductSalesResponse) Reset() {
	*x = GetProductSalesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductSalesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductSalesResponse) ProtoMessage() {}

func (x *GetProductSalesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductSalesResponse.ProtoReflect.Descriptor instead.
func (*GetProductSalesResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetProductSalesResponse) GetProductSales() []*ProductSalesSummary {
	if x != nil {
		return x.ProductSales
	}
	return nil
}

func (x *GetProductSalesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetTopSellingProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateRange      *DateRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	Limit          int32      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ProductGroupId *int32     `protobuf:"varint,3,opt,name=product_group_id,json=productGroupId,proto3,oneof" json:"product_group_id,omitempty"`
}

func (x *GetTopSellingProductsRequest) Reset() {
	*x = GetTopSellingProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopSellingProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopSellingProductsRequest) ProtoMessage() {}

func (x *GetTopSellingProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopSellingProductsRequest.ProtoReflect.Descriptor instead.
func (*GetTopSellingProductsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetTopSellingProductsRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetTopSellingProductsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTopSellingProductsRequest) GetProductGroupId() int32 {
	if x != nil && x.ProductGroupId != nil {
		return *x.ProductGroupId
	}
	return 0
}

type GetTopSellingProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopProducts []*ProductSalesSummary `protobuf:"bytes,1,rep,name=top_products,json=topProducts,proto3" json:"top_products,omitempty"`
}

func (x *GetTopSellingProductsResponse) Reset() {
	*x = GetTopSellingProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopSellingProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopSellingProductsResponse) ProtoMessage() {}

func (x *GetTopSellingProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopSellingProductsResponse.ProtoReflect.Descriptor instead.
func (*GetTopSellingProductsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetTopSellingProductsResponse) GetTopProducts() []*ProductSalesSummary {
	if x != nil {
		return x.TopProducts
	}
	return nil
}

// Employee Performance
type GetEmployeePerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateRange  *DateRange         `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	EmployeeId *int64             `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3,oneof" json:"employee_id,omitempty"`
	Pagination *PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetEmployeePerformanceRequest) Reset() {
	*x = GetEmployeePerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmployeePerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeePerformanceRequest) ProtoMessage() {}

func (x *GetEmployeePerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeePerformanceRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeePerformanceRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetEmployeePerformanceRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetEmployeePerformanceRequest) GetEmployeeId() int64 {
	if x != nil && x.EmployeeId != nil {
		return *x.EmployeeId
	}
	return 0
}

func (x *GetEmployeePerformanceRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetEmployeePerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Performances []*EmployeePerformance `protobuf:"bytes,1,rep,name=performances,proto3" json:"performances,omitempty"`
	Pagination   *PaginationResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetEmployeePerformanceResponse) Reset() {
	*x = GetEmployeePerformanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmployeePerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeePerformanceResponse) ProtoMessage() {}

func (x *GetEmployeePerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeePerformanceResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeePerformanceResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetEmployeePerformanceResponse) GetPerformances() []*EmployeePerformance {
	if x != nil {
		return x.Performances
	}
	return nil
}

func (x *GetEmployeePerformanceResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetPerformanceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateRange  *DateRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	EmployeeId *int64     `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3,oneof" json:"employee_id,omitempty"`
}

func (x *GetPerformanceReportRequest) Reset() {
	*x = GetPerformanceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceReportRequest) ProtoMessage() {}

func (x *GetPerformanceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceReportRequest.ProtoReflect.Descriptor instead.
func (*GetPerformanceReportRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetPerformanceReportRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetPerformanceReportRequest) GetEmployeeId() int64 {
	if x != nil && x.EmployeeId != nil {
		return *x.EmployeeId
	}
	return 0
}

type GetPerformanceReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformanceReport *PerformanceReport `protobuf:"bytes,1,opt,name=performance_report,json=performanceReport,proto3" json:"performance_report,omitempty"`
}

func (x *GetPerformanceReportResponse) Reset() {
	*x = GetPerformanceReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceReportResponse) ProtoMessage() {}

func (x *GetPerformanceReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceReportResponse.ProtoReflect.Descriptor instead.
func (*GetPerformanceReportResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetPerformanceReportResponse) GetPerformanceReport() *PerformanceReport {
	if x != nil {
		return x.PerformanceReport
	}
	return nil
}

// Customer Analytics
type GetCustomerAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateRange      *DateRange         `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	ProductGroupId *int32             `protobuf:"varint,2,opt,name=product_group_id,json=productGroupId,proto3,oneof" json:"product_group_id,omitempty"`
	Pagination     *PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetCustomerAnalyticsRequest) Reset() {
	*x = GetCustomerAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerAnalyticsRequest) ProtoMessage() {}

func (x *GetCustomerAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetCustomerAnalyticsRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetCustomerAnalyticsRequest) GetProductGroupId() int32 {
	if x != nil && x.ProductGroupId != nil {
		return *x.ProductGroupId
	}
	return 0
}

func (x *GetCustomerAnalyticsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetCustomerAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analytics  []*CustomerAnalytics `protobuf:"bytes,1,rep,name=analytics,proto3" json:"analytics,omitempty"`
	Pagination *PaginationResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetCustomerAnalyticsResponse) Reset() {
	*x = GetCustomerAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerAnalyticsResponse) ProtoMessage() {}

func (x *GetCustomerAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetCustomerAnalyticsResponse) GetAnalytics() []*CustomerAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *GetCustomerAnalyticsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetPeakHoursRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateRange *DateRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
}

func (x *GetPeakHoursRequest) Reset() {
	*x = GetPeakHoursRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeakHoursRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeakHoursRequest) ProtoMessage() {}

func (x *GetPeakHoursRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeakHoursRequest.ProtoReflect.Descriptor instead.
func (*GetPeakHoursRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetPeakHoursRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

type GetPeakHoursResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeakHours []*PeakHourData `protobuf:"bytes,1,rep,name=peak_hours,json=peakHours,proto3" json:"peak_hours,omitempty"`
}

func (x *GetPeakHoursResponse) Reset() {
	*x = GetPeakHoursResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeakHoursResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeakHoursResponse) ProtoMessage() {}

func (x *GetPeakHoursResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeakHoursResponse.ProtoReflect.Descriptor instead.
func (*GetPeakHoursResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{26}
}

func (x *GetPeakHoursResponse) GetPeakHours() []*PeakHourData {
	if x != nil {
		return x.PeakHours
	}
	return nil
}

type PeakHourData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour             string `protobuf:"bytes,1,opt,name=hour,proto3" json:"hour,omitempty"`
	TransactionCount int32  `protobuf:"varint,2,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	TotalRevenue     string `protobuf:"bytes,3,opt,name=total_revenue,json=totalRevenue,proto3" json:"total_revenue,omitempty"`
}

func (x *PeakHourData) Reset() {
	*x = PeakHourData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakHourData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakHourData) ProtoMessage() {}

func (x *PeakHourData) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakHourData.ProtoReflect.Descriptor instead.
func (*PeakHourData) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{27}
}

func (x *PeakHourData) GetHour() string {
	if x != nil {
		return x.Hour
	}
	return ""
}

func (x *PeakHourData) GetTransactionCount() int32 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *PeakHourData) GetTotalRevenue() string {
	if x != nil {
		return x.TotalRevenue
	}
	return ""
}

type GetDashboardDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetDashboardDataRequest) Reset() {
	*x = GetDashboardDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardDataRequest) ProtoMessage() {}

func (x *GetDashboardDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardDataRequest.ProtoReflect.Descriptor instead.
func (*GetDashboardDataRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{28}
}

func (x *GetDashboardDataRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type GetDashboardDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dashboard *DashboardData `protobuf:"bytes,1,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
}

func (x *GetDashboardDataResponse) Reset() {
	*x = GetDashboardDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardDataResponse) ProtoMessage() {}

func (x *GetDashboardDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardDataResponse.ProtoReflect.Descriptor instead.
func (*GetDashboardDataResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetDashboardDataResponse) GetDashboard() *DashboardData {
	if x != nil {
		return x.Dashboard
	}
	return nil
}

type DashboardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodayRevenue                string                 `protobuf:"bytes,1,opt,name=today_revenue,json=todayRevenue,proto3" json:"today_revenue,omitempty"`
	TodayTransactions           int32                  `protobuf:"varint,2,opt,name=today_transactions,json=todayTransactions,proto3" json:"today_transactions,omitempty"`
	TodayItemsSold              int32                  `protobuf:"varint,3,opt,name=today_items_sold,json=todayItemsSold,proto3" json:"today_items_sold,omitempty"`
	TodayProfit                 string                 `protobuf:"bytes,4,opt,name=today_profit,json=todayProfit,proto3" json:"today_profit,omitempty"`
	RevenueChangePercentage     string                 `protobuf:"bytes,5,opt,name=revenue_change_percentage,json=revenueChangePercentage,proto3" json:"revenue_change_percentage,omitempty"`
	TransactionChangePercentage string                 `protobuf:"bytes,6,opt,name=transaction_change_percentage,json=transactionChangePercentage,proto3" json:"transaction_change_percentage,omitempty"`
	TopProductsToday            []*ProductSalesSummary `protobuf:"bytes,7,rep,name=top_products_today,json=topProductsToday,proto3" json:"top_products_today,omitempty"`
	TopPerformersToday          []*EmployeePerformance `protobuf:"bytes,8,rep,name=top_performers_today,json=topPerformersToday,proto3" json:"top_performers_today,omitempty"`
	LowStockAlerts              []string               `protobuf:"bytes,9,rep,name=low_stock_alerts,json=lowStockAlerts,proto3" json:"low_stock_alerts,omitempty"`
	PendingCommissionsCount     int32                  `protobuf:"varint,10,opt,name=pending_commissions_count,json=pendingCommissionsCount,proto3" json:"pending_commissions_count,omitempty"`
}

func (x *DashboardData) Reset() {
	*x = DashboardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardData) ProtoMessage() {}

func (x *DashboardData) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardData.ProtoReflect.Descriptor instead.
func (*DashboardData) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{30}
}

func (x *DashboardData) GetTodayRevenue() string {
	if x != nil {
		return x.TodayRevenue
	}
	return ""
}

func (x *DashboardData) GetTodayTransactions() int32 {
	if x != nil {
		return x.TodayTransactions
	}
	return 0
}

func (x *DashboardData) GetTodayItemsSold() int32 {
	if x != nil {
		return x.TodayItemsSold
	}
	return 0
}

func (x *DashboardData) GetTodayProfit() string {
	if x != nil {
		return x.TodayProfit
	}
	return ""
}

func (x *DashboardData) GetRevenueChangePercentage() string {
	if x != nil {
		return x.RevenueChangePercentage
	}
	return ""
}

func (x *DashboardData) GetTransactionChangePercentage() string {
	if x != nil {
		return x.TransactionChangePercentage
	}
	return ""
}

func (x *DashboardData) GetTopProductsToday() []*ProductSalesSummary {
	if x != nil {
		return x.TopProductsToday
	}
	return nil
}

func (x *DashboardData) GetTopPerformersToday() []*EmployeePerformance {
	if x != nil {
		return x.TopPerformersToday
	}
	return nil
}

func (x *DashboardData) GetLowStockAlerts() []string {
	if x != nil {
		return x.LowStockAlerts
	}
	return nil
}

func (x *DashboardData) GetPendingCommissionsCount() int32 {
	if x != nil {
		return x.PendingCommissionsCount
	}
	return 0
}

type GetRealTimeMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRealTimeMetricsRequest) Reset() {
	*x = GetRealTimeMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRealTimeMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRealTimeMetricsRequest) ProtoMessage() {}

func (x *GetRealTimeMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRealTimeMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetRealTimeMetricsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{31}
}

type GetRealTimeMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics *RealTimeMetrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *GetRealTimeMetricsResponse) Reset() {
	*x = GetRealTimeMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRealTimeMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRealTimeMetricsResponse) ProtoMessage() {}

func (x *GetRealTimeMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRealTimeMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetRealTimeMetricsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetRealTimeMetricsResponse) GetMetrics() *RealTimeMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type RealTimeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdated             *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	ActiveTransactions      int32                  `protobuf:"varint,2,opt,name=active_transactions,json=activeTransactions,proto3" json:"active_transactions,omitempty"`
	HourlyRevenue           string                 `protobuf:"bytes,3,opt,name=hourly_revenue,json=hourlyRevenue,proto3" json:"hourly_revenue,omitempty"`
	HourlyTransactionCount  int32                  `protobuf:"varint,4,opt,name=hourly_transaction_count,json=hourlyTransactionCount,proto3" json:"hourly_transaction_count,omitempty"`
	AverageTransactionValue string                 `protobuf:"bytes,5,opt,name=average_transaction_value,json=averageTransactionValue,proto3" json:"average_transaction_value,omitempty"`
	RecentLargeTransactions []string               `protobuf:"bytes,6,rep,name=recent_large_transactions,json=recentLargeTransactions,proto3" json:"recent_large_transactions,omitempty"`
}

func (x *RealTimeMetrics) Reset() {
	*x = RealTimeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_analytics_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeMetrics) ProtoMessage() {}

func (x *RealTimeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeMetrics.ProtoReflect.Descriptor instead.
func (*RealTimeMetrics) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{33}
}

func (x *RealTimeMetrics) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *RealTimeMetrics) GetActiveTransactions() int32 {
	if x != nil {
		return x.ActiveTransactions
	}
	return 0
}

func (x *RealTimeMetrics) GetHourlyRevenue() string {
	if x != nil {
		return x.HourlyRevenue
	}
	return ""
}

func (x *RealTimeMetrics) GetHourlyTransactionCount() int32 {
	if x != nil {
		return x.HourlyTransactionCount
	}
	return 0
}

func (x *RealTimeMetrics) GetAverageTransactionValue() string {
	if x != nil {
		return x.AverageTransactionValue
	}
	return ""
}

func (x *RealTimeMetrics) GetRecentLargeTransactions() []string {
	if x != nil {
		return x.RecentLargeTransactions
	}
	return nil
}

var File_analytics_analytics_service_proto protoreflect.FileDescriptor

var file_analytics_analytics_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4f, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x5d, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x45, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xeb, 0x03, 0x0a, 0x11, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x73, 0x6f,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xe0, 0x03, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x22, 0xa4, 0x03, 0x0a, 0x13, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb1,
	0x03, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x65,
	0x61, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x22, 0xfd, 0x03, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f,
	0x73, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x0f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x70, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x74, 0x6f, 0x70,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x73, 0x68, 0x69, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x73, 0x68,
	0x69, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x1b, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0xb2, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x12, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x0b, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0xc8, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x99, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x61, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x65, 0x61, 0x6b,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x65,
	0x61, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x65, 0x61, 0x6b,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x74, 0x0a, 0x0c, 0x50, 0x65, 0x61, 0x6b, 0x48, 0x6f, 0x75,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0xb6,
	0x04, 0x0a, 0x0d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x10, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12,
	0x50, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x74,
	0x6f, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xc4, 0x08, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x26, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x24, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25,
	0x73, 0x79, 0x6e, 0x74, 0x72, 0x61, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analytics_analytics_service_proto_rawDescOnce sync.Once
	file_analytics_analytics_service_proto_rawDescData = file_analytics_analytics_service_proto_rawDesc
)

func file_analytics_analytics_service_proto_rawDescGZIP() []byte {
	file_analytics_analytics_service_proto_rawDescOnce.Do(func() {
		file_analytics_analytics_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_analytics_analytics_service_proto_rawDescData)
	})
	return file_analytics_analytics_service_proto_rawDescData
}

var file_analytics_analytics_service_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_analytics_analytics_service_proto_goTypes = []interface{}{
	(*PaginationRequest)(nil),              // 0: analytics.PaginationRequest
	(*PaginationResponse)(nil),             // 1: analytics.PaginationResponse
	(*DateRange)(nil),                      // 2: analytics.DateRange
	(*SalesSummaryDaily)(nil),              // 3: analytics.SalesSummaryDaily
	(*ProductSalesSummary)(nil),            // 4: analytics.ProductSalesSummary
	(*EmployeePerformance)(nil),            // 5: analytics.EmployeePerformance
	(*CustomerAnalytics)(nil),              // 6: analytics.CustomerAnalytics
	(*SalesReport)(nil),                    // 7: analytics.SalesReport
	(*PerformanceReport)(nil),              // 8: analytics.PerformanceReport
	(*GetSalesReportRequest)(nil),          // 9: analytics.GetSalesReportRequest
	(*GetSalesReportResponse)(nil),         // 10: analytics.GetSalesReportResponse
	(*GetDailySummaryRequest)(nil),         // 11: analytics.GetDailySummaryRequest
	(*GetDailySummaryResponse)(nil),        // 12: analytics.GetDailySummaryResponse
	(*GenerateDailySummaryRequest)(nil),    // 13: analytics.GenerateDailySummaryRequest
	(*GenerateDailySummaryResponse)(nil),   // 14: analytics.GenerateDailySummaryResponse
	(*GetProductSalesRequest)(nil),         // 15: analytics.GetProductSalesRequest
	(*GetProductSalesResponse)(nil),        // 16: analytics.GetProductSalesResponse
	(*GetTopSellingProductsRequest)(nil),   // 17: analytics.GetTopSellingProductsRequest
	(*GetTopSellingProductsResponse)(nil),  // 18: analytics.GetTopSellingProductsResponse
	(*GetEmployeePerformanceRequest)(nil),  // 19: analytics.GetEmployeePerformanceRequest
	(*GetEmployeePerformanceResponse)(nil), // 20: analytics.GetEmployeePerformanceResponse
	(*GetPerformanceReportRequest)(nil),    // 21: analytics.GetPerformanceReportRequest
	(*GetPerformanceReportResponse)(nil),   // 22: analytics.GetPerformanceReportResponse
	(*GetCustomerAnalyticsRequest)(nil),    // 23: analytics.GetCustomerAnalyticsRequest
	(*GetCustomerAnalyticsResponse)(nil),   // 24: analytics.GetCustomerAnalyticsResponse
	(*GetPeakHoursRequest)(nil),            // 25: analytics.GetPeakHoursRequest
	(*GetPeakHoursResponse)(nil),           // 26: analytics.GetPeakHoursResponse
	(*PeakHourData)(nil),                   // 27: analytics.PeakHourData
	(*GetDashboardDataRequest)(nil),        // 28: analytics.GetDashboardDataRequest
	(*GetDashboardDataResponse)(nil),       // 29: analytics.GetDashboardDataResponse
	(*DashboardData)(nil),                  // 30: analytics.DashboardData
	(*GetRealTimeMetricsRequest)(nil),      // 31: analytics.GetRealTimeMetricsRequest
	(*GetRealTimeMetricsResponse)(nil),     // 32: analytics.GetRealTimeMetricsResponse
	(*RealTimeMetrics)(nil),                // 33: analytics.RealTimeMetrics
	(*timestamppb.Timestamp)(nil),          // 34: google.protobuf.Timestamp
}
var file_analytics_analytics_service_proto_depIdxs = []int32{
	34, // 0: analytics.SalesSummaryDaily.created_at:type_name -> google.protobuf.Timestamp
	34, // 1: analytics.SalesSummaryDaily.updated_at:type_name -> google.protobuf.Timestamp
	34, // 2: analytics.ProductSalesSummary.created_at:type_name -> google.protobuf.Timestamp
	34, // 3: analytics.ProductSalesSummary.updated_at:type_name -> google.protobuf.Timestamp
	34, // 4: analytics.EmployeePerformance.created_at:type_name -> google.protobuf.Timestamp
	34, // 5: analytics.EmployeePerformance.updated_at:type_name -> google.protobuf.Timestamp
	34, // 6: analytics.CustomerAnalytics.created_at:type_name -> google.protobuf.Timestamp
	34, // 7: analytics.CustomerAnalytics.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 8: analytics.SalesReport.period:type_name -> analytics.DateRange
	3,  // 9: analytics.SalesReport.daily_breakdowns:type_name -> analytics.SalesSummaryDaily
	4,  // 10: analytics.SalesReport.top_products:type_name -> analytics.ProductSalesSummary
	2,  // 11: analytics.PerformanceReport.period:type_name -> analytics.DateRange
	5,  // 12: analytics.PerformanceReport.employee_performances:type_name -> analytics.EmployeePerformance
	2,  // 13: analytics.GetSalesReportRequest.date_range:type_name -> analytics.DateRange
	7,  // 14: analytics.GetSalesReportResponse.sales_report:type_name -> analytics.SalesReport
	3,  // 15: analytics.GetDailySummaryResponse.daily_summaries:type_name -> analytics.SalesSummaryDaily
	3,  // 16: analytics.GenerateDailySummaryResponse.generated_summaries:type_name -> analytics.SalesSummaryDaily
	2,  // 17: analytics.GetProductSalesRequest.date_range:type_name -> analytics.DateRange
	0,  // 18: analytics.GetProductSalesRequest.pagination:type_name -> analytics.PaginationRequest
	4,  // 19: analytics.GetProductSalesResponse.product_sales:type_name -> analytics.ProductSalesSummary
	1,  // 20: analytics.GetProductSalesResponse.pagination:type_name -> analytics.PaginationResponse
	2,  // 21: analytics.GetTopSellingProductsRequest.date_range:type_name -> analytics.DateRange
	4,  // 22: analytics.GetTopSellingProductsResponse.top_products:type_name -> analytics.ProductSalesSummary
	2,  // 23: analytics.GetEmployeePerformanceRequest.date_range:type_name -> analytics.DateRange
	0,  // 24: analytics.GetEmployeePerformanceRequest.pagination:type_name -> analytics.PaginationRequest
	5,  // 25: analytics.GetEmployeePerformanceResponse.performances:type_name -> analytics.EmployeePerformance
	1,  // 26: analytics.GetEmployeePerformanceResponse.pagination:type_name -> analytics.PaginationResponse
	2,  // 27: analytics.GetPerformanceReportRequest.date_range:type_name -> analytics.DateRange
	8,  // 28: analytics.GetPerformanceReportResponse.performance_report:type_name -> analytics.PerformanceReport
	2,  // 29: analytics.GetCustomerAnalyticsRequest.date_range:type_name -> analytics.DateRange
	0,  // 30: analytics.GetCustomerAnalyticsRequest.pagination:type_name -> analytics.PaginationRequest
	6,  // 31: analytics.GetCustomerAnalyticsResponse.analytics:type_name -> analytics.CustomerAnalytics
	1,  // 32: analytics.GetCustomerAnalyticsResponse.pagination:type_name -> analytics.PaginationResponse
	2,  // 33: analytics.GetPeakHoursRequest.date_range:type_name -> analytics.DateRange
	27, // 34: analytics.GetPeakHoursResponse.peak_hours:type_name -> analytics.PeakHourData
	30, // 35: analytics.GetDashboardDataResponse.dashboard:type_name -> analytics.DashboardData
	4,  // 36: analytics.DashboardData.top_products_today:type_name -> analytics.ProductSalesSummary
	5,  // 37: analytics.DashboardData.top_performers_today:type_name -> analytics.EmployeePerformance
	33, // 38: analytics.GetRealTimeMetricsResponse.metrics:type_name -> analytics.RealTimeMetrics
	34, // 39: analytics.RealTimeMetrics.last_updated:type_name -> google.protobuf.Timestamp
	9,  // 40: analytics.AnalyticsService.GetSalesReport:input_type -> analytics.GetSalesReportRequest
	11, // 41: analytics.AnalyticsService.GetDailySummary:input_type -> analytics.GetDailySummaryRequest
	13, // 42: analytics.AnalyticsService.GenerateDailySummary:input_type -> analytics.GenerateDailySummaryRequest
	15, // 43: analytics.AnalyticsService.GetProductSales:input_type -> analytics.GetProductSalesRequest
	17, // 44: analytics.AnalyticsService.GetTopSellingProducts:input_type -> analytics.GetTopSellingProductsRequest
	19, // 45: analytics.AnalyticsService.GetEmployeePerformance:input_type -> analytics.GetEmployeePerformanceRequest
	21, // 46: analytics.AnalyticsService.GetPerformanceReport:input_type -> analytics.GetPerformanceReportRequest
	23, // 47: analytics.AnalyticsService.GetCustomerAnalytics:input_type -> analytics.GetCustomerAnalyticsRequest
	25, // 48: analytics.AnalyticsService.GetPeakHours:input_type -> analytics.GetPeakHoursRequest
	28, // 49: analytics.AnalyticsService.GetDashboardData:input_type -> analytics.GetDashboardDataRequest
	31, // 50: analytics.AnalyticsService.GetRealTimeMetrics:input_type -> analytics.GetRealTimeMetricsRequest
	10, // 51: analytics.AnalyticsService.GetSalesReport:output_type -> analytics.GetSalesReportResponse
	12, // 52: analytics.AnalyticsService.GetDailySummary:output_type -> analytics.GetDailySummaryResponse
	14, // 53: analytics.AnalyticsService.GenerateDailySummary:output_type -> analytics.GenerateDailySummaryResponse
	16, // 54: analytics.AnalyticsService.GetProductSales:output_type -> analytics.GetProductSalesResponse
	18, // 55: analytics.AnalyticsService.GetTopSellingProducts:output_type -> analytics.GetTopSellingProductsResponse
	20, // 56: analytics.AnalyticsService.GetEmployeePerformance:output_type -> analytics.GetEmployeePerformanceResponse
	22, // 57: analytics.AnalyticsService.GetPerformanceReport:output_type -> analytics.GetPerformanceReportResponse
	24, // 58: analytics.AnalyticsService.GetCustomerAnalytics:output_type -> analytics.GetCustomerAnalyticsResponse
	26, // 59: analytics.AnalyticsService.GetPeakHours:output_type -> analytics.GetPeakHoursResponse
	29, // 60: analytics.AnalyticsService.GetDashboardData:output_type -> analytics.GetDashboardDataResponse
	32, // 61: analytics.AnalyticsService.GetRealTimeMetrics:output_type -> analytics.GetRealTimeMetricsResponse
	51, // [51:62] is the sub-list for method output_type
	40, // [40:51] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_analytics_analytics_service_proto_init() }
func file_analytics_analytics_service_proto_init() {
	if File_analytics_analytics_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analytics_analytics_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesSummaryDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSalesSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeePerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailySummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailySummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDailySummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDailySummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductSalesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopSellingProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopSellingProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmployeePerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmployeePerformanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeakHoursRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeakHoursResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakHourData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRealTimeMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRealTimeMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_analytics_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_analytics_analytics_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_analytics_analytics_service_proto_msgTypes[23].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analytics_analytics_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analytics_analytics_service_proto_goTypes,
		DependencyIndexes: file_analytics_analytics_service_proto_depIdxs,
		MessageInfos:      file_analytics_analytics_service_proto_msgTypes,
	}.Build()
	File_analytics_analytics_service_proto = out.File
	file_analytics_analytics_service_proto_rawDesc = nil
	file_analytics_analytics_service_proto_goTypes = nil
	file_analytics_analytics_service_proto_depIdxs = nil
}
