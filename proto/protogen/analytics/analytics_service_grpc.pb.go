// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: analytics/analytics_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_GetSalesReport_FullMethodName         = "/analytics.AnalyticsService/GetSalesReport"
	AnalyticsService_GetDailySummary_FullMethodName        = "/analytics.AnalyticsService/GetDailySummary"
	AnalyticsService_GenerateDailySummary_FullMethodName   = "/analytics.AnalyticsService/GenerateDailySummary"
	AnalyticsService_GetProductSales_FullMethodName        = "/analytics.AnalyticsService/GetProductSales"
	AnalyticsService_GetTopSellingProducts_FullMethodName  = "/analytics.AnalyticsService/GetTopSellingProducts"
	AnalyticsService_GetEmployeePerformance_FullMethodName = "/analytics.AnalyticsService/GetEmployeePerformance"
	AnalyticsService_GetPerformanceReport_FullMethodName   = "/analytics.AnalyticsService/GetPerformanceReport"
	AnalyticsService_GetCustomerAnalytics_FullMethodName   = "/analytics.AnalyticsService/GetCustomerAnalytics"
	AnalyticsService_GetPeakHours_FullMethodName           = "/analytics.AnalyticsService/GetPeakHours"
	AnalyticsService_GetDashboardData_FullMethodName       = "/analytics.AnalyticsService/GetDashboardData"
	AnalyticsService_GetRealTimeMetrics_FullMethodName     = "/analytics.AnalyticsService/GetRealTimeMetrics"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	// Sales Analytics
	GetSalesReport(ctx context.Context, in *GetSalesReportRequest, opts ...grpc.CallOption) (*GetSalesReportResponse, error)
	GetDailySummary(ctx context.Context, in *GetDailySummaryRequest, opts ...grpc.CallOption) (*GetDailySummaryResponse, error)
	GenerateDailySummary(ctx context.Context, in *GenerateDailySummaryRequest, opts ...grpc.CallOption) (*GenerateDailySummaryResponse, error)
	// Product Analytics
	GetProductSales(ctx context.Context, in *GetProductSalesRequest, opts ...grpc.CallOption) (*GetProductSalesResponse, error)
	GetTopSellingProducts(ctx context.Context, in *GetTopSellingProductsRequest, opts ...grpc.CallOption) (*GetTopSellingProductsResponse, error)
	// Employee Performance Analytics
	GetEmployeePerformance(ctx context.Context, in *GetEmployeePerformanceRequest, opts ...grpc.CallOption) (*GetEmployeePerformanceResponse, error)
	GetPerformanceReport(ctx context.Context, in *GetPerformanceReportRequest, opts ...grpc.CallOption) (*GetPerformanceReportResponse, error)
	// Customer Analytics
	GetCustomerAnalytics(ctx context.Context, in *GetCustomerAnalyticsRequest, opts ...grpc.CallOption) (*GetCustomerAnalyticsResponse, error)
	GetPeakHours(ctx context.Context, in *GetPeakHoursRequest, opts ...grpc.CallOption) (*GetPeakHoursResponse, error)
	// Dashboard and Real-time
	GetDashboardData(ctx context.Context, in *GetDashboardDataRequest, opts ...grpc.CallOption) (*GetDashboardDataResponse, error)
	GetRealTimeMetrics(ctx context.Context, in *GetRealTimeMetricsRequest, opts ...grpc.CallOption) (*GetRealTimeMetricsResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) GetSalesReport(ctx context.Context, in *GetSalesReportRequest, opts ...grpc.CallOption) (*GetSalesReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSalesReportResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetSalesReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetDailySummary(ctx context.Context, in *GetDailySummaryRequest, opts ...grpc.CallOption) (*GetDailySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailySummaryResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetDailySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GenerateDailySummary(ctx context.Context, in *GenerateDailySummaryRequest, opts ...grpc.CallOption) (*GenerateDailySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateDailySummaryResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GenerateDailySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetProductSales(ctx context.Context, in *GetProductSalesRequest, opts ...grpc.CallOption) (*GetProductSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductSalesResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetProductSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetTopSellingProducts(ctx context.Context, in *GetTopSellingProductsRequest, opts ...grpc.CallOption) (*GetTopSellingProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopSellingProductsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetTopSellingProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetEmployeePerformance(ctx context.Context, in *GetEmployeePerformanceRequest, opts ...grpc.CallOption) (*GetEmployeePerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmployeePerformanceResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetEmployeePerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetPerformanceReport(ctx context.Context, in *GetPerformanceReportRequest, opts ...grpc.CallOption) (*GetPerformanceReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPerformanceReportResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPerformanceReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetCustomerAnalytics(ctx context.Context, in *GetCustomerAnalyticsRequest, opts ...grpc.CallOption) (*GetCustomerAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetCustomerAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetPeakHours(ctx context.Context, in *GetPeakHoursRequest, opts ...grpc.CallOption) (*GetPeakHoursResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeakHoursResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPeakHours_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetDashboardData(ctx context.Context, in *GetDashboardDataRequest, opts ...grpc.CallOption) (*GetDashboardDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardDataResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetDashboardData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetRealTimeMetrics(ctx context.Context, in *GetRealTimeMetricsRequest, opts ...grpc.CallOption) (*GetRealTimeMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealTimeMetricsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetRealTimeMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
type AnalyticsServiceServer interface {
	// Sales Analytics
	GetSalesReport(context.Context, *GetSalesReportRequest) (*GetSalesReportResponse, error)
	GetDailySummary(context.Context, *GetDailySummaryRequest) (*GetDailySummaryResponse, error)
	GenerateDailySummary(context.Context, *GenerateDailySummaryRequest) (*GenerateDailySummaryResponse, error)
	// Product Analytics
	GetProductSales(context.Context, *GetProductSalesRequest) (*GetProductSalesResponse, error)
	GetTopSellingProducts(context.Context, *GetTopSellingProductsRequest) (*GetTopSellingProductsResponse, error)
	// Employee Performance Analytics
	GetEmployeePerformance(context.Context, *GetEmployeePerformanceRequest) (*GetEmployeePerformanceResponse, error)
	GetPerformanceReport(context.Context, *GetPerformanceReportRequest) (*GetPerformanceReportResponse, error)
	// Customer Analytics
	GetCustomerAnalytics(context.Context, *GetCustomerAnalyticsRequest) (*GetCustomerAnalyticsResponse, error)
	GetPeakHours(context.Context, *GetPeakHoursRequest) (*GetPeakHoursResponse, error)
	// Dashboard and Real-time
	GetDashboardData(context.Context, *GetDashboardDataRequest) (*GetDashboardDataResponse, error)
	GetRealTimeMetrics(context.Context, *GetRealTimeMetricsRequest) (*GetRealTimeMetricsResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) GetSalesReport(context.Context, *GetSalesReportRequest) (*GetSalesReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesReport not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetDailySummary(context.Context, *GetDailySummaryRequest) (*GetDailySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailySummary not implemented")
}
func (UnimplementedAnalyticsServiceServer) GenerateDailySummary(context.Context, *GenerateDailySummaryRequest) (*GenerateDailySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDailySummary not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetProductSales(context.Context, *GetProductSalesRequest) (*GetProductSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductSales not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetTopSellingProducts(context.Context, *GetTopSellingProductsRequest) (*GetTopSellingProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopSellingProducts not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetEmployeePerformance(context.Context, *GetEmployeePerformanceRequest) (*GetEmployeePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeePerformance not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetPerformanceReport(context.Context, *GetPerformanceReportRequest) (*GetPerformanceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceReport not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetCustomerAnalytics(context.Context, *GetCustomerAnalyticsRequest) (*GetCustomerAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetPeakHours(context.Context, *GetPeakHoursRequest) (*GetPeakHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeakHours not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetDashboardData(context.Context, *GetDashboardDataRequest) (*GetDashboardDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardData not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetRealTimeMetrics(context.Context, *GetRealTimeMetricsRequest) (*GetRealTimeMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealTimeMetrics not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_GetSalesReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetSalesReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetSalesReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetSalesReport(ctx, req.(*GetSalesReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetDailySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetDailySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetDailySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetDailySummary(ctx, req.(*GetDailySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GenerateDailySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDailySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GenerateDailySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GenerateDailySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GenerateDailySummary(ctx, req.(*GenerateDailySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetProductSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetProductSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetProductSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetProductSales(ctx, req.(*GetProductSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetTopSellingProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopSellingProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetTopSellingProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetTopSellingProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetTopSellingProducts(ctx, req.(*GetTopSellingProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetEmployeePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeePerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetEmployeePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetEmployeePerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetEmployeePerformance(ctx, req.(*GetEmployeePerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetPerformanceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPerformanceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPerformanceReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPerformanceReport(ctx, req.(*GetPerformanceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetCustomerAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetCustomerAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetCustomerAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetCustomerAnalytics(ctx, req.(*GetCustomerAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetPeakHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeakHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPeakHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPeakHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPeakHours(ctx, req.(*GetPeakHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetDashboardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetDashboardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetDashboardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetDashboardData(ctx, req.(*GetDashboardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetRealTimeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealTimeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetRealTimeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetRealTimeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetRealTimeMetrics(ctx, req.(*GetRealTimeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSalesReport",
			Handler:    _AnalyticsService_GetSalesReport_Handler,
		},
		{
			MethodName: "GetDailySummary",
			Handler:    _AnalyticsService_GetDailySummary_Handler,
		},
		{
			MethodName: "GenerateDailySummary",
			Handler:    _AnalyticsService_GenerateDailySummary_Handler,
		},
		{
			MethodName: "GetProductSales",
			Handler:    _AnalyticsService_GetProductSales_Handler,
		},
		{
			MethodName: "GetTopSellingProducts",
			Handler:    _AnalyticsService_GetTopSellingProducts_Handler,
		},
		{
			MethodName: "GetEmployeePerformance",
			Handler:    _AnalyticsService_GetEmployeePerformance_Handler,
		},
		{
			MethodName: "GetPerformanceReport",
			Handler:    _AnalyticsService_GetPerformanceReport_Handler,
		},
		{
			MethodName: "GetCustomerAnalytics",
			Handler:    _AnalyticsService_GetCustomerAnalytics_Handler,
		},
		{
			MethodName: "GetPeakHours",
			Handler:    _AnalyticsService_GetPeakHours_Handler,
		},
		{
			MethodName: "GetDashboardData",
			Handler:    _AnalyticsService_GetDashboardData_Handler,
		},
		{
			MethodName: "GetRealTimeMetrics",
			Handler:    _AnalyticsService_GetRealTimeMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics/analytics_service.proto",
}
