// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: commissions/commision_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommissionService_CalculateCommission_FullMethodName        = "/commission.CommissionService/CalculateCommission"
	CommissionService_RecalculateCommission_FullMethodName      = "/commission.CommissionService/RecalculateCommission"
	CommissionService_BulkCalculateCommissions_FullMethodName   = "/commission.CommissionService/BulkCalculateCommissions"
	CommissionService_GetCommissionCalculation_FullMethodName   = "/commission.CommissionService/GetCommissionCalculation"
	CommissionService_ListCommissionCalculations_FullMethodName = "/commission.CommissionService/ListCommissionCalculations"
	CommissionService_ApproveCommission_FullMethodName          = "/commission.CommissionService/ApproveCommission"
	CommissionService_RejectCommission_FullMethodName           = "/commission.CommissionService/RejectCommission"
	CommissionService_BulkApproveCommissions_FullMethodName     = "/commission.CommissionService/BulkApproveCommissions"
	CommissionService_PayCommission_FullMethodName              = "/commission.CommissionService/PayCommission"
	CommissionService_GetCommissionPayment_FullMethodName       = "/commission.CommissionService/GetCommissionPayment"
	CommissionService_GetCommissionSummary_FullMethodName       = "/commission.CommissionService/GetCommissionSummary"
	CommissionService_GetCommissionReport_FullMethodName        = "/commission.CommissionService/GetCommissionReport"
	CommissionService_GetCommissionSettings_FullMethodName      = "/commission.CommissionService/GetCommissionSettings"
)

// CommissionServiceClient is the client API for CommissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommissionServiceClient interface {
	// Commission Calculation
	CalculateCommission(ctx context.Context, in *CalculateCommissionRequest, opts ...grpc.CallOption) (*CalculateCommissionResponse, error)
	RecalculateCommission(ctx context.Context, in *RecalculateCommissionRequest, opts ...grpc.CallOption) (*RecalculateCommissionResponse, error)
	BulkCalculateCommissions(ctx context.Context, in *BulkCalculateCommissionsRequest, opts ...grpc.CallOption) (*BulkCalculateCommissionsResponse, error)
	// Commission Management
	GetCommissionCalculation(ctx context.Context, in *GetCommissionCalculationRequest, opts ...grpc.CallOption) (*GetCommissionCalculationResponse, error)
	ListCommissionCalculations(ctx context.Context, in *ListCommissionCalculationsRequest, opts ...grpc.CallOption) (*ListCommissionCalculationsResponse, error)
	ApproveCommission(ctx context.Context, in *ApproveCommissionRequest, opts ...grpc.CallOption) (*ApproveCommissionResponse, error)
	RejectCommission(ctx context.Context, in *RejectCommissionRequest, opts ...grpc.CallOption) (*RejectCommissionResponse, error)
	BulkApproveCommissions(ctx context.Context, in *BulkApproveCommissionsRequest, opts ...grpc.CallOption) (*BulkApproveCommissionsResponse, error)
	// Commission Payment
	PayCommission(ctx context.Context, in *PayCommissionRequest, opts ...grpc.CallOption) (*PayCommissionResponse, error)
	GetCommissionPayment(ctx context.Context, in *GetCommissionPaymentRequest, opts ...grpc.CallOption) (*GetCommissionPaymentResponse, error)
	// Commission Reporting
	GetCommissionSummary(ctx context.Context, in *GetCommissionSummaryRequest, opts ...grpc.CallOption) (*GetCommissionSummaryResponse, error)
	GetCommissionReport(ctx context.Context, in *GetCommissionReportRequest, opts ...grpc.CallOption) (*GetCommissionReportResponse, error)
	// Commission Settings
	GetCommissionSettings(ctx context.Context, in *GetCommissionSettingsRequest, opts ...grpc.CallOption) (*GetCommissionSettingsResponse, error)
}

type commissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommissionServiceClient(cc grpc.ClientConnInterface) CommissionServiceClient {
	return &commissionServiceClient{cc}
}

func (c *commissionServiceClient) CalculateCommission(ctx context.Context, in *CalculateCommissionRequest, opts ...grpc.CallOption) (*CalculateCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateCommissionResponse)
	err := c.cc.Invoke(ctx, CommissionService_CalculateCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) RecalculateCommission(ctx context.Context, in *RecalculateCommissionRequest, opts ...grpc.CallOption) (*RecalculateCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecalculateCommissionResponse)
	err := c.cc.Invoke(ctx, CommissionService_RecalculateCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) BulkCalculateCommissions(ctx context.Context, in *BulkCalculateCommissionsRequest, opts ...grpc.CallOption) (*BulkCalculateCommissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCalculateCommissionsResponse)
	err := c.cc.Invoke(ctx, CommissionService_BulkCalculateCommissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) GetCommissionCalculation(ctx context.Context, in *GetCommissionCalculationRequest, opts ...grpc.CallOption) (*GetCommissionCalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommissionCalculationResponse)
	err := c.cc.Invoke(ctx, CommissionService_GetCommissionCalculation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) ListCommissionCalculations(ctx context.Context, in *ListCommissionCalculationsRequest, opts ...grpc.CallOption) (*ListCommissionCalculationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommissionCalculationsResponse)
	err := c.cc.Invoke(ctx, CommissionService_ListCommissionCalculations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) ApproveCommission(ctx context.Context, in *ApproveCommissionRequest, opts ...grpc.CallOption) (*ApproveCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveCommissionResponse)
	err := c.cc.Invoke(ctx, CommissionService_ApproveCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) RejectCommission(ctx context.Context, in *RejectCommissionRequest, opts ...grpc.CallOption) (*RejectCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectCommissionResponse)
	err := c.cc.Invoke(ctx, CommissionService_RejectCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) BulkApproveCommissions(ctx context.Context, in *BulkApproveCommissionsRequest, opts ...grpc.CallOption) (*BulkApproveCommissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkApproveCommissionsResponse)
	err := c.cc.Invoke(ctx, CommissionService_BulkApproveCommissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) PayCommission(ctx context.Context, in *PayCommissionRequest, opts ...grpc.CallOption) (*PayCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayCommissionResponse)
	err := c.cc.Invoke(ctx, CommissionService_PayCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) GetCommissionPayment(ctx context.Context, in *GetCommissionPaymentRequest, opts ...grpc.CallOption) (*GetCommissionPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommissionPaymentResponse)
	err := c.cc.Invoke(ctx, CommissionService_GetCommissionPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) GetCommissionSummary(ctx context.Context, in *GetCommissionSummaryRequest, opts ...grpc.CallOption) (*GetCommissionSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommissionSummaryResponse)
	err := c.cc.Invoke(ctx, CommissionService_GetCommissionSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) GetCommissionReport(ctx context.Context, in *GetCommissionReportRequest, opts ...grpc.CallOption) (*GetCommissionReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommissionReportResponse)
	err := c.cc.Invoke(ctx, CommissionService_GetCommissionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) GetCommissionSettings(ctx context.Context, in *GetCommissionSettingsRequest, opts ...grpc.CallOption) (*GetCommissionSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommissionSettingsResponse)
	err := c.cc.Invoke(ctx, CommissionService_GetCommissionSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommissionServiceServer is the server API for CommissionService service.
// All implementations must embed UnimplementedCommissionServiceServer
// for forward compatibility.
type CommissionServiceServer interface {
	// Commission Calculation
	CalculateCommission(context.Context, *CalculateCommissionRequest) (*CalculateCommissionResponse, error)
	RecalculateCommission(context.Context, *RecalculateCommissionRequest) (*RecalculateCommissionResponse, error)
	BulkCalculateCommissions(context.Context, *BulkCalculateCommissionsRequest) (*BulkCalculateCommissionsResponse, error)
	// Commission Management
	GetCommissionCalculation(context.Context, *GetCommissionCalculationRequest) (*GetCommissionCalculationResponse, error)
	ListCommissionCalculations(context.Context, *ListCommissionCalculationsRequest) (*ListCommissionCalculationsResponse, error)
	ApproveCommission(context.Context, *ApproveCommissionRequest) (*ApproveCommissionResponse, error)
	RejectCommission(context.Context, *RejectCommissionRequest) (*RejectCommissionResponse, error)
	BulkApproveCommissions(context.Context, *BulkApproveCommissionsRequest) (*BulkApproveCommissionsResponse, error)
	// Commission Payment
	PayCommission(context.Context, *PayCommissionRequest) (*PayCommissionResponse, error)
	GetCommissionPayment(context.Context, *GetCommissionPaymentRequest) (*GetCommissionPaymentResponse, error)
	// Commission Reporting
	GetCommissionSummary(context.Context, *GetCommissionSummaryRequest) (*GetCommissionSummaryResponse, error)
	GetCommissionReport(context.Context, *GetCommissionReportRequest) (*GetCommissionReportResponse, error)
	// Commission Settings
	GetCommissionSettings(context.Context, *GetCommissionSettingsRequest) (*GetCommissionSettingsResponse, error)
	mustEmbedUnimplementedCommissionServiceServer()
}

// UnimplementedCommissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommissionServiceServer struct{}

func (UnimplementedCommissionServiceServer) CalculateCommission(context.Context, *CalculateCommissionRequest) (*CalculateCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCommission not implemented")
}
func (UnimplementedCommissionServiceServer) RecalculateCommission(context.Context, *RecalculateCommissionRequest) (*RecalculateCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateCommission not implemented")
}
func (UnimplementedCommissionServiceServer) BulkCalculateCommissions(context.Context, *BulkCalculateCommissionsRequest) (*BulkCalculateCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCalculateCommissions not implemented")
}
func (UnimplementedCommissionServiceServer) GetCommissionCalculation(context.Context, *GetCommissionCalculationRequest) (*GetCommissionCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionCalculation not implemented")
}
func (UnimplementedCommissionServiceServer) ListCommissionCalculations(context.Context, *ListCommissionCalculationsRequest) (*ListCommissionCalculationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommissionCalculations not implemented")
}
func (UnimplementedCommissionServiceServer) ApproveCommission(context.Context, *ApproveCommissionRequest) (*ApproveCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveCommission not implemented")
}
func (UnimplementedCommissionServiceServer) RejectCommission(context.Context, *RejectCommissionRequest) (*RejectCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectCommission not implemented")
}
func (UnimplementedCommissionServiceServer) BulkApproveCommissions(context.Context, *BulkApproveCommissionsRequest) (*BulkApproveCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkApproveCommissions not implemented")
}
func (UnimplementedCommissionServiceServer) PayCommission(context.Context, *PayCommissionRequest) (*PayCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayCommission not implemented")
}
func (UnimplementedCommissionServiceServer) GetCommissionPayment(context.Context, *GetCommissionPaymentRequest) (*GetCommissionPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionPayment not implemented")
}
func (UnimplementedCommissionServiceServer) GetCommissionSummary(context.Context, *GetCommissionSummaryRequest) (*GetCommissionSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionSummary not implemented")
}
func (UnimplementedCommissionServiceServer) GetCommissionReport(context.Context, *GetCommissionReportRequest) (*GetCommissionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionReport not implemented")
}
func (UnimplementedCommissionServiceServer) GetCommissionSettings(context.Context, *GetCommissionSettingsRequest) (*GetCommissionSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionSettings not implemented")
}
func (UnimplementedCommissionServiceServer) mustEmbedUnimplementedCommissionServiceServer() {}
func (UnimplementedCommissionServiceServer) testEmbeddedByValue()                           {}

// UnsafeCommissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommissionServiceServer will
// result in compilation errors.
type UnsafeCommissionServiceServer interface {
	mustEmbedUnimplementedCommissionServiceServer()
}

func RegisterCommissionServiceServer(s grpc.ServiceRegistrar, srv CommissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommissionService_ServiceDesc, srv)
}

func _CommissionService_CalculateCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).CalculateCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_CalculateCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).CalculateCommission(ctx, req.(*CalculateCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_RecalculateCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).RecalculateCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_RecalculateCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).RecalculateCommission(ctx, req.(*RecalculateCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_BulkCalculateCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCalculateCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).BulkCalculateCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_BulkCalculateCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).BulkCalculateCommissions(ctx, req.(*BulkCalculateCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_GetCommissionCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).GetCommissionCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_GetCommissionCalculation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).GetCommissionCalculation(ctx, req.(*GetCommissionCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_ListCommissionCalculations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionCalculationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).ListCommissionCalculations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_ListCommissionCalculations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).ListCommissionCalculations(ctx, req.(*ListCommissionCalculationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_ApproveCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).ApproveCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_ApproveCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).ApproveCommission(ctx, req.(*ApproveCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_RejectCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).RejectCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_RejectCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).RejectCommission(ctx, req.(*RejectCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_BulkApproveCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkApproveCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).BulkApproveCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_BulkApproveCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).BulkApproveCommissions(ctx, req.(*BulkApproveCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_PayCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).PayCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_PayCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).PayCommission(ctx, req.(*PayCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_GetCommissionPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).GetCommissionPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_GetCommissionPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).GetCommissionPayment(ctx, req.(*GetCommissionPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_GetCommissionSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).GetCommissionSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_GetCommissionSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).GetCommissionSummary(ctx, req.(*GetCommissionSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_GetCommissionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).GetCommissionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_GetCommissionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).GetCommissionReport(ctx, req.(*GetCommissionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_GetCommissionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).GetCommissionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_GetCommissionSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).GetCommissionSettings(ctx, req.(*GetCommissionSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommissionService_ServiceDesc is the grpc.ServiceDesc for CommissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commission.CommissionService",
	HandlerType: (*CommissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateCommission",
			Handler:    _CommissionService_CalculateCommission_Handler,
		},
		{
			MethodName: "RecalculateCommission",
			Handler:    _CommissionService_RecalculateCommission_Handler,
		},
		{
			MethodName: "BulkCalculateCommissions",
			Handler:    _CommissionService_BulkCalculateCommissions_Handler,
		},
		{
			MethodName: "GetCommissionCalculation",
			Handler:    _CommissionService_GetCommissionCalculation_Handler,
		},
		{
			MethodName: "ListCommissionCalculations",
			Handler:    _CommissionService_ListCommissionCalculations_Handler,
		},
		{
			MethodName: "ApproveCommission",
			Handler:    _CommissionService_ApproveCommission_Handler,
		},
		{
			MethodName: "RejectCommission",
			Handler:    _CommissionService_RejectCommission_Handler,
		},
		{
			MethodName: "BulkApproveCommissions",
			Handler:    _CommissionService_BulkApproveCommissions_Handler,
		},
		{
			MethodName: "PayCommission",
			Handler:    _CommissionService_PayCommission_Handler,
		},
		{
			MethodName: "GetCommissionPayment",
			Handler:    _CommissionService_GetCommissionPayment_Handler,
		},
		{
			MethodName: "GetCommissionSummary",
			Handler:    _CommissionService_GetCommissionSummary_Handler,
		},
		{
			MethodName: "GetCommissionReport",
			Handler:    _CommissionService_GetCommissionReport_Handler,
		},
		{
			MethodName: "GetCommissionSettings",
			Handler:    _CommissionService_GetCommissionSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commissions/commision_service.proto",
}
